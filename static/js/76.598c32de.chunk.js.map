{"version":3,"file":"static/js/76.598c32de.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/form-control/src/form-error.tsx","components/RegisterForm/RegisterForm.jsx","utils/validation.js","Pages/Register.jsx"],"sourcesContent":["import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Flex,\n  Heading,\n  Input,\n  Button,\n  InputGroup,\n  Stack,\n  InputLeftElement,\n  chakra,\n  Box,\n  Avatar,\n  FormControl,\n  InputRightElement,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { FaUserAlt, FaLock, FaEnvelope } from 'react-icons/fa';\nimport { signup } from '../../redux/auth/operations';\nimport { validateEmail, validatePass } from 'utils/validation';\n\nconst CFaUserAlt = chakra(FaUserAlt);\nconst CFaLock = chakra(FaLock);\nconst CFaEnvelope = chakra(FaEnvelope);\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [isInvalid, setIsInvalid] = useState({ email: null, password: null });\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n\n  const handleShowClick = () => setShowPassword(!showPassword);\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n\n    if (name === 'email') {\n      setIsInvalid(prevState => ({\n        ...prevState,\n        email: !validateEmail(value),\n      }));\n    }\n\n    if (name === 'password') {\n      setIsInvalid(prevState => ({\n        ...prevState,\n        password: value.length < 7 || !validatePass(value),\n      }));\n    }\n\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(signup(formData));\n    setFormData({ name: '', email: '', password: '' });\n  };\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      width=\"100wh\"\n      height=\"100vh\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Stack\n        flexDir=\"column\"\n        mb=\"2\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Avatar bg=\"teal.500\" />\n        <Heading color=\"teal.400\">Welcome</Heading>\n        <Box minW={{ base: '90%', md: '468px' }}>\n          <form onSubmit={handleSubmit}>\n            <Stack\n              rounded={10}\n              spacing={4}\n              p=\"1rem\"\n              backgroundColor=\"whiteAlpha.900\"\n              boxShadow=\"md\"\n            >\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<CFaUserAlt color=\"gray.400\" />}\n                  />\n                  <Input\n                    name=\"name\"\n                    type=\"text\"\n                    color=\"#000\"\n                    placeholder=\"Name\"\n                    autoComplete=\"username\"\n                    onChange={handleChange}\n                    isRequired\n                  />\n                </InputGroup>\n              </FormControl>\n              <FormControl isInvalid={isInvalid.email}>\n                <InputGroup flexDirection=\"column\">\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<CFaEnvelope color=\"gray.400\" />}\n                  />\n                  <Input\n                    name=\"email\"\n                    type=\"email\"\n                    color=\"#000\"\n                    placeholder=\"Email\"\n                    autoComplete=\"username\"\n                    onChange={handleChange}\n                    isRequired\n                  />\n                  {isInvalid.email && (\n                    <FormErrorMessage>Email is invalid.</FormErrorMessage>\n                  )}\n                </InputGroup>\n              </FormControl>\n              <FormControl isInvalid={isInvalid.password}>\n                <InputGroup flexDirection=\"column\">\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.400\"\n                    children={<CFaLock color=\"gray.400\" />}\n                  />\n                  <Input\n                    name=\"password\"\n                    color=\"#000\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Password\"\n                    autoComplete=\"current-password\"\n                    onChange={handleChange}\n                    isRequired\n                  />\n                  {isInvalid.password && (\n                    <FormErrorMessage>\n                      Password must contain at least 7 characters and include at\n                      least 1 digit.\n                    </FormErrorMessage>\n                  )}\n                  <InputRightElement width=\"4.5rem\">\n                    <Button\n                      h=\"1.75rem\"\n                      backgroundColor=\"gray.200\"\n                      _hover={{ backgroundColor: 'gray.300' }}\n                      size=\"sm\"\n                      onClick={handleShowClick}\n                    >\n                      {showPassword ? 'Hide' : 'Show'}\n                    </Button>\n                  </InputRightElement>\n                </InputGroup>\n              </FormControl>\n              <Button\n                borderRadius={5}\n                type=\"submit\"\n                variant=\"solid\"\n                colorScheme=\"pink\"\n                width=\"full\"\n              >\n                Sign up\n              </Button>\n            </Stack>\n          </form>\n        </Box>\n      </Stack>\n      <Box>\n        Already have an account?{' '}\n        <Link\n          to=\"/login\"\n          style={{ textDecoration: 'underline', color: '#319795' }}\n        >\n          Sign In\n        </Link>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default RegisterForm;\n","// Email validation\nexport const validateEmail = email => {\n  const emailRegexp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return emailRegexp.test(email);\n};\n\nexport const validatePass = password => {\n  const passRegex = /^(?=.*[0-9])(?=.*[a-zA-Z]).{7,}$/;\n  return passRegex.test(password);\n};\n","import RegisterForm from '../components/RegisterForm/RegisterForm';\n\nconst Register = () => <RegisterForm />;\n\nexport default Register;\n"],"names":["createContext","name","errorMessage","_createContext2","FormErrorStylesProvider","useFormErrorStyles","FormErrorMessage","forwardRef","props","ref","styles","useMultiStyleConfig","ownProps","omitThemingProps","field","useFormControlContext","isInvalid","value","children","chakra","div","getErrorMessageProps","className","cx","__css","display","alignItems","text","displayName","_className","Icon","icon","fill","d","CFaUserAlt","FaUserAlt","CFaLock","FaLock","CFaEnvelope","FaEnvelope","dispatch","useDispatch","_useState","useState","email","password","_useState2","_slicedToArray","setIsInvalid","_useState3","_useState4","showPassword","setShowPassword","_useState5","_useState6","formData","setFormData","handleChange","e","_e$target","target","prevState","_objectSpread","test","length","prevFormData","_defineProperty","_jsxs","Flex","flexDirection","width","height","justifyContent","Stack","flexDir","mb","_jsx","Avatar","bg","Heading","color","Box","minW","base","md","onSubmit","preventDefault","signup","rounded","spacing","p","backgroundColor","boxShadow","FormControl","InputGroup","InputLeftElement","pointerEvents","Input","type","placeholder","autoComplete","onChange","isRequired","InputRightElement","Button","h","_hover","size","onClick","borderRadius","variant","colorScheme","Link","to","style","textDecoration","RegisterForm"],"sourceRoot":""}