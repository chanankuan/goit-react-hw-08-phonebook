{"version":3,"file":"static/js/626.5cd374ff.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","Pages/Login.jsx","components/LoginForm/LoginForm.styled.jsx","../node_modules/@chakra-ui/layout/src/text.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Heading,\n  Input,\n  Button,\n  InputGroup,\n  Stack,\n  InputLeftElement,\n  chakra,\n  Box,\n  Avatar,\n  FormControl,\n  FormHelperText,\n  InputRightElement,\n  Text,\n} from '@chakra-ui/react';\nimport { FaLock, FaEnvelope } from 'react-icons/fa';\nimport { login } from '../../redux/auth/operations';\nimport { AnimatedFlex } from './LoginForm.styled';\nimport { selectError } from '../../redux/auth/selectors';\n\nconst CFaLock = chakra(FaLock);\nconst CFaEnvelope = chakra(FaEnvelope);\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const [shake, setShake] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({ email: '', password: '' });\n\n  const handleShowClick = () => setShowPassword(!showPassword);\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(login(formData));\n    // setFormData({ email: '', password: '' });\n  };\n\n  useEffect(() => {\n    if (error === 'Unable to login') {\n      setShake(true);\n      const id = setTimeout(() => {\n        setShake(false); // Reset shake animation after a short delay\n      }, 500);\n\n      return () => clearTimeout(id);\n    }\n  }, [error]);\n\n  return (\n    <AnimatedFlex shake={shake}>\n      <Stack\n        flexDir=\"column\"\n        mb=\"2\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Avatar bg=\"teal.500\" />\n        <Heading color=\"teal.400\">Welcome</Heading>\n        <Box minW={{ base: '90%', md: '468px' }}>\n          <form onSubmit={handleSubmit}>\n            <Stack\n              rounded={10}\n              spacing={4}\n              p=\"1rem\"\n              backgroundColor=\"whiteAlpha.900\"\n              boxShadow=\"md\"\n            >\n              {error === 'Unable to login' && (\n                <Text color=\"red\">Incorrect email or password.</Text>\n              )}\n              <FormControl>\n                <InputGroup flexDirection=\"column\">\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<CFaEnvelope color=\"gray.400\" />}\n                  />\n                  <Input\n                    name=\"email\"\n                    type=\"email\"\n                    color=\"#000\"\n                    placeholder=\"Email\"\n                    autoComplete=\"username\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    isRequired\n                  />\n                </InputGroup>\n              </FormControl>\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.400\"\n                    children={<CFaLock color=\"gray.400\" />}\n                  />\n                  <Input\n                    name=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    color=\"#000\"\n                    placeholder=\"Password\"\n                    autoComplete=\"current-password\"\n                    value={formData.password}\n                    onChange={handleChange}\n                    isRequired\n                  />\n                  <InputRightElement width=\"4.5rem\">\n                    <Button\n                      h=\"1.75rem\"\n                      backgroundColor=\"gray.200\"\n                      _hover={{ backgroundColor: 'gray.300' }}\n                      size=\"sm\"\n                      onClick={handleShowClick}\n                    >\n                      {showPassword ? 'Hide' : 'Show'}\n                    </Button>\n                  </InputRightElement>\n                </InputGroup>\n                <FormHelperText textAlign=\"right\">\n                  <Link>forgot password?</Link>\n                </FormHelperText>\n              </FormControl>\n              <Button\n                borderRadius={5}\n                type=\"submit\"\n                variant=\"solid\"\n                colorScheme=\"pink\"\n                width=\"full\"\n              >\n                Sign in\n              </Button>\n            </Stack>\n          </form>\n        </Box>\n      </Stack>\n      <Box>\n        New to us?{' '}\n        <Link\n          to=\"/register\"\n          style={{ textDecoration: 'underline', color: '#319795' }}\n        >\n          Sign Up\n        </Link>\n      </Box>\n    </AnimatedFlex>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from '../components/LoginForm/LoginForm';\n\nconst Login = () => <LoginForm />;\n\nexport default Login;\n","import styled from '@emotion/styled';\n\nconst shakeAnimation = `\n  @keyframes shake {\n    0%, 100% {\n      transform: translateX(0);\n    }\n    25%, 75% {\n      transform: translateX(-10px);\n    }\n    50% {\n      transform: translateX(10px);\n    }\n  }\n`;\n\nexport const AnimatedFlex = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  animation: ${props => (props.shake ? 'shake 0.5s' : 'none')};\n  ${shakeAnimation}\n`;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n"],"names":["CFaLock","chakra","FaLock","CFaEnvelope","FaEnvelope","dispatch","useDispatch","error","useSelector","selectError","_useState","useState","_useState2","_slicedToArray","shake","setShake","_useState3","_useState4","showPassword","setShowPassword","_useState5","email","password","_useState6","formData","setFormData","handleChange","e","_e$target","target","value","name","prevFormData","_objectSpread","_defineProperty","useEffect","id","setTimeout","clearTimeout","_jsxs","AnimatedFlex","children","Stack","flexDir","mb","justifyContent","alignItems","_jsx","Avatar","bg","Heading","color","Box","minW","base","md","onSubmit","preventDefault","login","rounded","spacing","p","backgroundColor","boxShadow","Text","FormControl","InputGroup","flexDirection","InputLeftElement","pointerEvents","Input","type","placeholder","autoComplete","onChange","isRequired","InputRightElement","width","Button","h","_hover","size","onClick","FormHelperText","textAlign","Link","borderRadius","variant","colorScheme","to","style","textDecoration","LoginForm","styled","_templateObject","_taggedTemplateLiteral","props","forwardRef","ref","styles","useStyleConfig","omitThemingProps","rest","className","align","decoration","casing","aliasedProps","compact","textTransform","cx","__css","displayName"],"sourceRoot":""}