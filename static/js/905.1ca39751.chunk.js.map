{"version":3,"file":"static/js/905.1ca39751.chunk.js","mappings":"sXAgBaA,E,OAAeC,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wKAOvB,SAAAC,GAAK,MACA,oBAAhBA,EAAMC,MAA8B,aAAe,MAAM,GAtBzC,2M,mBCoBdC,GAAUC,EAAAA,EAAAA,GAAOC,EAAAA,KACjBC,GAAcF,EAAAA,EAAAA,GAAOG,EAAAA,KAqH3B,EAnHkB,WAChB,IAAMC,GAAWC,EAAAA,EAAAA,MACXP,GAAQQ,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAgCL,EAAAA,EAAAA,UAAS,CAAEM,MAAO,GAAIC,SAAU,KAAKC,GAAAN,EAAAA,EAAAA,GAAAG,EAAA,GAA9DI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAItBG,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAEE,OAAlBC,EAAKF,EAALE,MAAOC,EAAIH,EAAJG,KACfN,GAAY,SAAAO,GAAY,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAY,IAAAE,EAAAA,EAAAA,GAAA,GAAGH,EAAOD,GAAK,GAC/D,EAQA,OACEK,EAAAA,EAAAA,MAACpC,EAAY,CAACK,MAAOA,EAAMgC,SAAA,EACzBD,EAAAA,EAAAA,MAACE,EAAAA,EAAK,CACJC,QAAQ,SACRC,GAAG,IACHC,eAAe,SACfC,WAAW,SAAQL,SAAA,EAEnBM,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,GAAG,cACXF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACC,MAAM,WAAUV,SAAC,aAC1BM,EAAAA,EAAAA,KAACK,EAAAA,GAAG,CAACC,KAAM,CAAEC,KAAM,MAAOC,GAAI,SAAUd,UACtCM,EAAAA,EAAAA,KAAA,QAAMS,SAjBO,SAAAxB,GACnBA,EAAEyB,iBACF1C,GAAS2C,EAAAA,EAAAA,IAAM7B,IACfC,EAAY,CAAEJ,MAAO,GAAIC,SAAU,IACrC,EAaqCc,UAC3BD,EAAAA,EAAAA,MAACE,EAAAA,EAAK,CACJiB,QAAS,GACTC,QAAS,EACTC,EAAE,OACFC,gBAAgB,iBAChBC,UAAU,KAAItB,SAAA,EAEdM,EAAAA,EAAAA,KAACiB,EAAAA,GAAW,CAAAvB,UACVD,EAAAA,EAAAA,MAACyB,EAAAA,EAAU,CAACC,cAAc,SAAQzB,SAAA,EAChCM,EAAAA,EAAAA,KAACoB,EAAAA,EAAgB,CACfC,cAAc,OACd3B,UAAUM,EAAAA,EAAAA,KAAClC,EAAW,CAACsC,MAAM,gBAE/BJ,EAAAA,EAAAA,KAACsB,EAAAA,EAAK,CACJjC,KAAK,QACLkC,KAAK,QACLnB,MAAM,OACNoB,YAAY,QACZC,aAAa,WACbrC,MAAON,EAASH,MAChB+C,SAAU1C,EACV2C,YAAU,UAIhBlC,EAAAA,EAAAA,MAACwB,EAAAA,GAAW,CAAAvB,SAAA,EACVD,EAAAA,EAAAA,MAACyB,EAAAA,EAAU,CAAAxB,SAAA,EACTM,EAAAA,EAAAA,KAACoB,EAAAA,EAAgB,CACfC,cAAc,OACdjB,MAAM,WACNV,UAAUM,EAAAA,EAAAA,KAACrC,EAAO,CAACyC,MAAM,gBAE3BJ,EAAAA,EAAAA,KAACsB,EAAAA,EAAK,CACJjC,KAAK,WACLkC,KAAM/C,EAAe,OAAS,WAC9B4B,MAAM,OACNoB,YAAY,WACZC,aAAa,mBACbrC,MAAON,EAASF,SAChB8C,SAAU1C,EACV2C,YAAU,KAEZ3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAiB,CAACC,MAAM,SAAQnC,UAC/BM,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLC,EAAE,UACFhB,gBAAgB,WAChBiB,OAAQ,CAAEjB,gBAAiB,YAC3BkB,KAAK,KACLC,QAzEI,WAAH,OAASzD,GAAiBD,EAAc,EAyEhBkB,SAExBlB,EAAe,OAAS,eAI/BwB,EAAAA,EAAAA,KAACmC,EAAAA,GAAc,CAACC,UAAU,QAAO1C,UAC/BM,EAAAA,EAAAA,KAACqC,EAAAA,GAAI,CAAA3C,SAAC,2BAGVM,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLQ,aAAc,EACdf,KAAK,SACLgB,QAAQ,QACRC,YAAY,OACZX,MAAM,OAAMnC,SACb,uBAOTD,EAAAA,EAAAA,MAACY,EAAAA,GAAG,CAAAX,SAAA,CAAC,aACQ,KACXM,EAAAA,EAAAA,KAACqC,EAAAA,GAAI,CACHI,GAAG,YACHC,MAAO,CAAEC,eAAgB,YAAavC,MAAO,WAAYV,SAC1D,iBAMT,ECtIA,EAFc,WAAH,OAASM,EAAAA,EAAAA,KAAC4C,EAAS,GAAI,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","Pages/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst shakeAnimation = `\n  @keyframes shake {\n    0%, 100% {\n      transform: translateX(0);\n    }\n    25%, 75% {\n      transform: translateX(-10px);\n    }\n    50% {\n      transform: translateX(10px);\n    }\n  }\n`;\n\nexport const AnimatedFlex = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  animation: ${props =>\n    props.error === 'Unable to login' ? 'shake 0.5s' : 'none'};\n  ${shakeAnimation}\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Heading,\n  Input,\n  Button,\n  InputGroup,\n  Stack,\n  InputLeftElement,\n  chakra,\n  Box,\n  Avatar,\n  FormControl,\n  FormHelperText,\n  InputRightElement,\n} from '@chakra-ui/react';\nimport { FaLock, FaEnvelope } from 'react-icons/fa';\nimport { login } from '../../redux/auth/operations';\nimport { AnimatedFlex } from './LoginForm.styled';\nimport { selectError } from '../../redux/auth/selectors';\n\nconst CFaLock = chakra(FaLock);\nconst CFaEnvelope = chakra(FaEnvelope);\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({ email: '', password: '' });\n\n  const handleShowClick = () => setShowPassword(!showPassword);\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(login(formData));\n    setFormData({ email: '', password: '' });\n  };\n\n  return (\n    <AnimatedFlex error={error}>\n      <Stack\n        flexDir=\"column\"\n        mb=\"2\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Avatar bg=\"teal.500\" />\n        <Heading color=\"teal.400\">Welcome</Heading>\n        <Box minW={{ base: '90%', md: '468px' }}>\n          <form onSubmit={handleSubmit}>\n            <Stack\n              rounded={10}\n              spacing={4}\n              p=\"1rem\"\n              backgroundColor=\"whiteAlpha.900\"\n              boxShadow=\"md\"\n            >\n              <FormControl>\n                <InputGroup flexDirection=\"column\">\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<CFaEnvelope color=\"gray.400\" />}\n                  />\n                  <Input\n                    name=\"email\"\n                    type=\"email\"\n                    color=\"#000\"\n                    placeholder=\"Email\"\n                    autoComplete=\"username\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    isRequired\n                  />\n                </InputGroup>\n              </FormControl>\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.400\"\n                    children={<CFaLock color=\"gray.400\" />}\n                  />\n                  <Input\n                    name=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    color=\"#000\"\n                    placeholder=\"Password\"\n                    autoComplete=\"current-password\"\n                    value={formData.password}\n                    onChange={handleChange}\n                    isRequired\n                  />\n                  <InputRightElement width=\"4.5rem\">\n                    <Button\n                      h=\"1.75rem\"\n                      backgroundColor=\"gray.200\"\n                      _hover={{ backgroundColor: 'gray.300' }}\n                      size=\"sm\"\n                      onClick={handleShowClick}\n                    >\n                      {showPassword ? 'Hide' : 'Show'}\n                    </Button>\n                  </InputRightElement>\n                </InputGroup>\n                <FormHelperText textAlign=\"right\">\n                  <Link>forgot password?</Link>\n                </FormHelperText>\n              </FormControl>\n              <Button\n                borderRadius={5}\n                type=\"submit\"\n                variant=\"solid\"\n                colorScheme=\"pink\"\n                width=\"full\"\n              >\n                Sign in\n              </Button>\n            </Stack>\n          </form>\n        </Box>\n      </Stack>\n      <Box>\n        New to us?{' '}\n        <Link\n          to=\"/register\"\n          style={{ textDecoration: 'underline', color: '#319795' }}\n        >\n          Sign Up\n        </Link>\n      </Box>\n    </AnimatedFlex>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from '../components/LoginForm/LoginForm';\n\nconst Login = () => <LoginForm />;\n\nexport default Login;\n"],"names":["AnimatedFlex","styled","_templateObject","_taggedTemplateLiteral","props","error","CFaLock","chakra","FaLock","CFaEnvelope","FaEnvelope","dispatch","useDispatch","useSelector","selectError","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","email","password","_useState4","formData","setFormData","handleChange","e","_e$target","target","value","name","prevFormData","_objectSpread","_defineProperty","_jsxs","children","Stack","flexDir","mb","justifyContent","alignItems","_jsx","Avatar","bg","Heading","color","Box","minW","base","md","onSubmit","preventDefault","login","rounded","spacing","p","backgroundColor","boxShadow","FormControl","InputGroup","flexDirection","InputLeftElement","pointerEvents","Input","type","placeholder","autoComplete","onChange","isRequired","InputRightElement","width","Button","h","_hover","size","onClick","FormHelperText","textAlign","Link","borderRadius","variant","colorScheme","to","style","textDecoration","LoginForm"],"sourceRoot":""}