{"version":3,"file":"static/js/431.b9080a40.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactEdit/ContactEdit.jsx","components/ContactsList/ContactsList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","Pages/Contacts.jsx"],"sourcesContent":["export const selectFilter = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../../redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IMaskInput } from 'react-imask';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport { updateContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst NumberMask = forwardRef(function TextMaskCustom(props, ref) {\n  const { onChange, ...other } = props;\n  return (\n    <IMaskInput\n      {...other}\n      mask=\"(#00) 000-00-00\"\n      definitions={{\n        '#': /[0-9]/,\n      }}\n      inputRef={ref}\n      onAccept={value => onChange({ target: { name: props.name, value } })}\n      overwrite\n    />\n  );\n});\n\nconst ContactEdit = ({ contactId, onClose, isOpen }) => {\n  const dispatch = useDispatch();\n  const initialRef = useRef(null);\n  const finalRef = useRef(null);\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const contacts = useSelector(selectContacts);\n  const currentContact = contacts.filter(\n    contact => contact.id === contactId\n  )[0];\n\n  useEffect(() => {\n    currentContact &&\n      setFormData({\n        name: currentContact.name,\n        number: currentContact.number,\n      });\n  }, [currentContact]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      formData.name === currentContact.name &&\n      formData.number === currentContact.number\n    ) {\n      return;\n    }\n\n    dispatch(updateContact({ contactId, formData }));\n    onClose();\n    setFormData({ name: '', number: '' });\n  };\n\n  const handleChange = e => {\n    let { name, value } = e.target;\n\n    if (name === 'name') {\n      value = value.replace(/[^a-zA-Zа-яА-ЯіІʼ\\s-]/g, '');\n    }\n\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value }));\n  };\n\n  return (\n    <Modal\n      isCentered\n      initialFocusRef={initialRef}\n      finalFocusRef={finalRef}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader color=\"black\">Update contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel color=\"black\">Full name</FormLabel>\n            <Input\n              ref={initialRef}\n              name=\"name\"\n              value={formData.name}\n              placeholder=\"Full name\"\n              color=\"black\"\n              onChange={handleChange}\n              isRequired={true}\n            />\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel color=\"black\">Phone number</FormLabel>\n            <Input\n              name=\"number\"\n              value={formData.number}\n              placeholder=\"Number\"\n              color=\"black\"\n              onChange={handleChange}\n              as={NumberMask}\n              isRequired={true}\n            />\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"pink\" mr={3} onClick={handleSubmit}>\n            Save\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ContactEdit;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { useDisclosure } from '@chakra-ui/react';\nimport { BsPencilSquare } from 'react-icons/bs';\nimport {\n  Avatar,\n  Icon,\n  Grid,\n  GridItem,\n  Card,\n  Heading,\n  Text,\n  Button,\n} from '@chakra-ui/react';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { useState } from 'react';\nimport ContactEdit from 'components/ContactEdit/ContactEdit';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const [currentId, setCurrentId] = useState('');\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const handleEdit = contactId => {\n    setCurrentId(contactId);\n    onOpen();\n  };\n\n  return (\n    <>\n      <Grid gap={6}>\n        {filteredContacts.map(({ id, number, name }) => (\n          <GridItem w=\"100%\" key={id}>\n            <Card\n              backgroundColor=\"gray.100\"\n              padding=\"5px 10px\"\n              transition=\"transform 100ms ease-in-out\"\n              _hover={{ transform: 'scale(1.02)', boxShadow: '' }}\n            >\n              <Grid\n                templateColumns=\"60px 1fr 1fr 40px 40px\"\n                alignItems=\"center\"\n              >\n                <Avatar name={name} />\n                <Heading size=\"md\">{name}</Heading>\n                <Text>{number}</Text>\n                <Button padding=\"5px\">\n                  <DeleteIcon onClick={() => handleDelete(id)} />\n                </Button>\n                <Button padding=\"5px\">\n                  <Icon as={BsPencilSquare} onClick={() => handleEdit(id)} />\n                </Button>\n              </Grid>\n            </Card>\n          </GridItem>\n        ))}\n      </Grid>\n\n      <ContactEdit onClose={onClose} isOpen={isOpen} contactId={currentId} />\n    </>\n  );\n};\n\nexport default ContactsList;\n","import { forwardRef, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IMaskInput } from 'react-imask';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst NumberMask = forwardRef(function TextMaskCustom(props, ref) {\n  const { onChange, ...other } = props;\n  return (\n    <IMaskInput\n      {...other}\n      mask=\"(#00) 000-00-00\"\n      definitions={{\n        '#': /[0-9]/,\n      }}\n      inputRef={ref}\n      onAccept={value => onChange({ target: { name: props.name, value } })}\n      overwrite\n    />\n  );\n});\n\nconst ContactForm = ({ onClose, isOpen }) => {\n  const dispatch = useDispatch();\n  const initialRef = useRef(null);\n  const finalRef = useRef(null);\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isExist = contacts.some(contact => {\n      return contact.name.toLowerCase() === formData.name.toLowerCase();\n    });\n\n    if (isExist) {\n      alert(`${formData.name} is already in contacts.`);\n      onClose();\n      setFormData({ name: '', number: '' });\n      return;\n    }\n\n    dispatch(addContact(formData));\n    onClose();\n    setFormData({ name: '', number: '' });\n  };\n\n  const handleChange = e => {\n    let { name, value } = e.target;\n\n    if (name === 'name') {\n      value = value.replace(/[^a-zA-Zа-яА-ЯіІʼ\\s-]/g, '');\n    }\n\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value }));\n  };\n\n  return (\n    <Modal\n      isCentered\n      initialFocusRef={initialRef}\n      finalFocusRef={finalRef}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader color=\"black\">Add new contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel color=\"black\">Full name</FormLabel>\n            <Input\n              ref={initialRef}\n              name=\"name\"\n              value={formData.name}\n              placeholder=\"Full name\"\n              color=\"black\"\n              onChange={handleChange}\n              isRequired={true}\n            />\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel color=\"black\">Phone number</FormLabel>\n            <Input\n              name=\"number\"\n              value={formData.number}\n              placeholder=\"Number\"\n              color=\"black\"\n              onChange={handleChange}\n              as={NumberMask}\n              isRequired={true}\n            />\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"pink\" mr={3} onClick={handleSubmit}>\n            Save\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ContactForm;\n","import { Input } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\nimport { selectFilter } from '../../redux/filter/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Input\n      display=\"block\"\n      margin=\"0 auto\"\n      marginBottom=\"30px\"\n      width=\"300px\"\n      placeholder=\"Search\"\n      value={filter}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDisclosure } from '@chakra-ui/react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { Heading, Button } from '@chakra-ui/react';\nimport { selectContacts } from '../redux/contacts/selectors';\nimport { Container } from 'components/Common';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container style={{ paddingTop: 116 }}>\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n          <ContactsList />\n        </>\n      ) : (\n        <Heading as=\"h1\" size=\"lg\">\n          No contacts yet.\n        </Heading>\n      )}\n      <Button\n        height={50}\n        width={50}\n        rounded=\"50%\"\n        position=\"fixed\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        right={10}\n        bottom={10}\n        onClick={onOpen}\n      >\n        <AddIcon />\n      </Button>\n\n      <ContactForm onClose={onClose} isOpen={isOpen} />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectFilter","state","filter","selectContacts","contacts","items","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","NumberMask","forwardRef","props","ref","onChange","other","_objectWithoutProperties","_excluded","_jsx","IMaskInput","_objectSpread","mask","definitions","inputRef","onAccept","value","target","overwrite","_ref","contactId","onClose","isOpen","dispatch","useDispatch","initialRef","useRef","finalRef","_useState","useState","number","_useState2","_slicedToArray","formData","setFormData","currentContact","useSelector","id","useEffect","handleChange","e","_e$target","replace","prevFormData","_defineProperty","_jsxs","Modal","isCentered","initialFocusRef","finalFocusRef","children","ModalOverlay","ModalContent","ModalHeader","color","ModalCloseButton","ModalBody","pb","FormControl","FormLabel","Input","placeholder","isRequired","mt","as","ModalFooter","Button","colorScheme","mr","onClick","preventDefault","updateContact","_useDisclosure","useDisclosure","onOpen","filteredContacts","currentId","setCurrentId","_Fragment","Grid","gap","map","GridItem","w","Card","backgroundColor","padding","transition","_hover","transform","boxShadow","templateColumns","alignItems","Avatar","Heading","size","Text","DeleteIcon","deleteContact","Icon","BsPencilSquare","ContactEdit","some","alert","concat","addContact","display","margin","marginBottom","width","setFilter","fetchContacts","Container","style","paddingTop","length","Filter","ContactsList","height","rounded","position","justifyContent","right","bottom","AddIcon","ContactForm"],"sourceRoot":""}