{"version":3,"file":"static/js/868.c1aa2531.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","Pages/Contacts.jsx"],"sourcesContent":["export const selectFilter = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../../redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useSelector, useDispatch } from 'react-redux';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { BsPencilSquare } from 'react-icons/bs';\nimport {\n  Avatar,\n  Icon,\n  Grid,\n  GridItem,\n  Card,\n  Heading,\n  Text,\n  Button,\n} from '@chakra-ui/react';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <Grid gap={6}>\n      {filteredContacts.map(({ id, number, name }) => (\n        <GridItem w=\"100%\" key={id}>\n          <Card\n            backgroundColor=\"gray.100\"\n            padding=\"5px 10px\"\n            transition=\"transform 100ms ease-in-out\"\n            _hover={{ transform: 'scale(1.02)', boxShadow: '' }}\n          >\n            <Grid templateColumns=\"60px 1fr 1fr 40px 40px\" alignItems=\"center\">\n              <Avatar name={name} />\n              <Heading size=\"md\">{name}</Heading>\n              <Text>{number}</Text>\n              <Button padding=\"5px\">\n                <DeleteIcon onClick={() => handleDelete(id)} />\n              </Button>\n              <Button padding=\"5px\">\n                <Icon as={BsPencilSquare} />\n              </Button>\n            </Grid>\n          </Card>\n        </GridItem>\n      ))}\n    </Grid>\n  );\n};\n\nexport default ContactsList;\n","import { forwardRef, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IMaskInput } from 'react-imask';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst NumberMask = forwardRef(function TextMaskCustom(props, ref) {\n  const { onChange, ...other } = props;\n  return (\n    <IMaskInput\n      {...other}\n      mask=\"(#00) 000-00-00\"\n      definitions={{\n        '#': /[0-9]/,\n      }}\n      inputRef={ref}\n      onAccept={value => onChange({ target: { name: props.name, value } })}\n      overwrite\n    />\n  );\n});\n\nconst ContactForm = ({ onClose, isOpen }) => {\n  const dispatch = useDispatch();\n  const initialRef = useRef(null);\n  const finalRef = useRef(null);\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isExist = contacts.some(contact => {\n      return contact.name.toLowerCase() === formData.name.toLowerCase();\n    });\n\n    if (isExist) {\n      alert(`${formData.name} is already in contacts.`);\n      onClose();\n      setFormData({ name: '', number: '' });\n      return;\n    }\n\n    dispatch(addContact(formData));\n    onClose();\n    setFormData({ name: '', number: '' });\n  };\n\n  const handleChange = e => {\n    let { name, value } = e.target;\n\n    if (name === 'name') {\n      value = value.replace(/[^a-zA-Zа-яА-ЯіІʼ\\s-]/g, '');\n    }\n\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value }));\n  };\n\n  return (\n    <Modal\n      isCentered\n      initialFocusRef={initialRef}\n      finalFocusRef={finalRef}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader color=\"black\">Add new contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel color=\"black\">Full name</FormLabel>\n            <Input\n              ref={initialRef}\n              name=\"name\"\n              value={formData.name}\n              placeholder=\"Full name\"\n              color=\"black\"\n              onChange={handleChange}\n              isRequired={true}\n            />\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel color=\"black\">Phone number</FormLabel>\n            <Input\n              name=\"number\"\n              value={formData.number}\n              placeholder=\"Number\"\n              color=\"black\"\n              onChange={handleChange}\n              as={NumberMask}\n              isRequired={true}\n            />\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"pink\" mr={3} onClick={handleSubmit}>\n            Save\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ContactForm;\n","import { Input } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\nimport { selectFilter } from '../../redux/filter/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Input\n      display=\"block\"\n      margin=\"0 auto\"\n      marginBottom=\"30px\"\n      width=\"300px\"\n      placeholder=\"Search\"\n      value={filter}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDisclosure } from '@chakra-ui/react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { Heading, Button } from '@chakra-ui/react';\nimport { selectContacts } from '../redux/contacts/selectors';\nimport { Container } from 'components/Common';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container style={{ paddingTop: 116 }}>\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n          <ContactsList />\n        </>\n      ) : (\n        <Heading as=\"h1\" size=\"lg\">\n          No contacts yet.\n        </Heading>\n      )}\n      <Button\n        height={50}\n        width={50}\n        rounded=\"50%\"\n        position=\"fixed\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        right={10}\n        bottom={10}\n        onClick={onOpen}\n      >\n        <AddIcon />\n      </Button>\n\n      <ContactForm onClose={onClose} isOpen={isOpen} />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectFilter","state","filter","selectContacts","contacts","items","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","dispatch","useDispatch","filteredContacts","useSelector","_jsx","Grid","gap","children","map","_ref","id","number","GridItem","w","Card","backgroundColor","padding","transition","_hover","transform","boxShadow","_jsxs","templateColumns","alignItems","Avatar","Heading","size","Text","Button","DeleteIcon","onClick","contactId","deleteContact","Icon","as","BsPencilSquare","NumberMask","forwardRef","props","ref","onChange","other","_objectWithoutProperties","_excluded","IMaskInput","_objectSpread","mask","definitions","inputRef","onAccept","value","target","overwrite","onClose","isOpen","initialRef","useRef","finalRef","_useState","useState","_useState2","_slicedToArray","formData","setFormData","handleChange","e","_e$target","replace","prevFormData","_defineProperty","Modal","isCentered","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","color","ModalCloseButton","ModalBody","pb","FormControl","FormLabel","Input","placeholder","isRequired","mt","ModalFooter","colorScheme","mr","preventDefault","some","alert","concat","addContact","display","margin","marginBottom","width","setFilter","_useDisclosure","useDisclosure","onOpen","useEffect","fetchContacts","Container","style","paddingTop","length","_Fragment","Filter","ContactsList","height","rounded","position","justifyContent","right","bottom","AddIcon","ContactForm"],"sourceRoot":""}